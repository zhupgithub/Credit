想法：
1、搭建服务与模块时，除了业务分模块与服务外，还可能需要考虑人员分配（暂时只是将common中的api服务、utils服务做成模块，就是因为人员不够，项目发展前期，积累不够）、
用户访问量（将mobile服务分为用户服务、认证服务、借款服务，就是因为用户的注册、登入访问量巨大，借款量相对较少，认证模块系统消耗巨大，
所以预计后期将系统消耗巨大的服务放置在服务器较好的系统中，甚至搭建更多的集群）等等
2、将直接将通过配置中心的URL地址获取配置，这样就不需要设置eureka地址，再通过eureka地址去获取配置，这样将暴露了配置中心的信息，很不安全，单纯暴露配置中的URL地址更加安全（已完成）
3、将Feign请求处理的日志打印debug级别，方便查询Feign调用异常问题（https://www.cnblogs.com/lkd934/p/9541417.html）
4、统一异常处理，这是需要Feign调用中进行特殊处理
5、网关生成唯一请求号，方便处理一个业务逻辑调用多个服务时，异常的查看
6、将minor模块整体打成一个jar包，然后将一些关键参数配置到外置的配置文件中，当然也有一些默认配置；当用户不想只用默认配置，可以让用户修改外置配置文件，
最后用户重启服务就可以使用修改外置文件生效
7、在service和controller都使用@Valid注解，对于单个基本类型作为参数也使用@Valid注解
8、对于分布式日志链路跟踪，使用redis来存储服务之间链路调用的日志，在记录分布式日志链路跟踪，只记录网关、controller、consumer（服务调用方，确保调用方调用了服务）、
provider（服务提供方，确保提供方提供了正确的功能）。其中service层的功能点的日志，由于日志过多且不易形成固定格式，
只是让service层的日志有traceID和parentID（存这个值方便后期定位日志），然后通过ELK的形式显示在kibana中。这样形成了系统整体日志和详细日志的展示。(
开发排查系统问题用得最多的手段就是查看系统日志，在分布式环境中一般使用ELK来统一收集日志，
但是在并发大时使用日志定位问题还是比较麻烦，由于大量的其他用户/其他线程的日志也一起输出穿行其中导致很难筛选出指定请求的全部相关日志，以及下游线程/服务对应的日志。)
9、由于使用feign进行服务之间调用时，当被调用方出现异常，返回的异常信息不会返回回来，这是可以自定义feign返回异常

问题：
1、将一些公用配置写在配置中心的application-dev.yml文件无效(已解决，原因：写在本地的配置文件写在了配置中心的resource/config文件夹中，这个名称的文件夹默认是属于配置中心一个人的)
2、当模块层次超过3个时，maven多模块将发生异常(已解决，其他服务忘记了导入web相关的jar包才不能成功的)
3、当配置中心的文件设置为native时，自动刷新将失效，放在git上是可以成功的
4、关于分布式日志查询，不想再去日志文件中查询日志了，可以为每个请求增加一个requestId，通过ELK显示数据，直接在kibana中通过这个requestId来显示一个调用过程
5、当服务断开后，当使用本地配置文件时，将去获取调用本地的mq。当注册中心断开了，其他服务也将不能启动
6、当显示@Feign声明的接口不能@Autowired的时候，看下启动类上是否@EnableFeignClients注解，当存在这个注解，但还是显示相同错误，可以将@Feign声明的接口写入@EnableFeignClients注解的basePackage属性中。
7、Feign的服务降级无效，可能是yml文件中feign.hystrix.enabled=true没有进行设置
8、使用配置中心（http://localhost:9760/gateway-native.yml）打开配置文件，打不开，可能文件缩行有问题
9、使用spring.factory文件替换@ComponentScan(basePackages = "com.zhupeng.**")，使之不用扫描全部路径下，方便提供jar包给其他人使用
10、在@EnableFeignClients的注解中，没有添加basePackages属性并赋予值时，将不会Feign的功能（Feign的服务降级和Feign的调用其他服务的功能），这个basePackages属性表示将这包下的类向Feign进行注册（但是我不想要在这儿书写，是否可以在Feign客户端写这个属性）





记录：
1、当开启网关服务后，对外只开放网关服务的端口，其他服务的端口都不进行对外开放，当想访问其他服务时，直接通过网关服务的过滤器。对于gateway网关而已，默认时有一个router的，这个router是以相应服务的服务名称。当自己主动为指定服务设置了router，但是没有关闭默认服务（spring.cloud.gateway.discovery.locator.enabled = false）时，这时这个服务有两个router可以访问这个服务。
2、对于提供其他服务调用的接口，对于URL地址的值需要加上一些特殊字段，防止直接被前端访问了；但是对于被@FeignClient标注的类，不能再在该类上面添加@RequestMapping注解，否则会报该URL地址已经被实现
3、对于修改了API服务，其他相关服务都得进行重新启动；例如服务的提供者和服务的消费者。
4、调用其他服务，只要经过了网关服务，不管最终的URL地址是否存在，都会经过网关的过滤器，这样会带给网关极大的性能消耗
5、在gateway中，当使用了path断言时，必须使用stripPrefix过滤器，将转发之前的字符串去掉，否则调用URL地址会出错，报404异常。
6、springcloud的服务之间的调用(feign声明式调用)没有经过网关的